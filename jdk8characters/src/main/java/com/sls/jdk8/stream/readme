stream的操作可以分为两类，中间操作(intermediate operations)和结束操作(terminal operations):

中间操作总是会惰式执行，调用中间操作只会生成一个标记了该操作的新stream。
结束操作会触发实际计算，计算发生时会把所有中间操作积攒的操作以pipeline的方式执行，这样可以减少迭代次数。计算完成之后stream就会失效。

stream 是容器调用Collection.stream()方法获取的 但是又有区别：

1、无存储 stream不是一种结构，它只是某种数据源的一个视图，数据源可以是一个数组，java容器或者是I/O channel等。
2、为函数式编程而生。
          对stream的任何修改后不会修改背后的数据源，比如对stream执行过滤操作并不会删除被过滤的元素，而是会产生一个不包含被过滤元素的新stream.
3、惰性执行。
           steam上的执行并不会立即执行。只有等到用户真正需要结果的时候才会执行。
4、可消费性。
            stream只能被消费一次，一旦遍历过后就会失效，就像容器的迭代那样，想要再次遍历必须重新生成。